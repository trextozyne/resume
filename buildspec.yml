version: 0.2

phases:
  pre_build:
    commands:
      # Log in to Amazon ECR
      - aws --version
      - REPOSITORY_DOMAIN_NAME=$(echo ${account_id}.dkr.ecr.us-east-2.amazonaws.com)
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $REPOSITORY_DOMAIN_NAME
      - REPOSITORY_URI=$(echo $REPOSITORY_DOMAIN_NAME'/'$IMAGE_REPO_NAME)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

  build:
    commands:
      # Check if image exists in ECR
      - |
        if aws ecr describe-images --repository-name $IMAGE_REPO_NAME --query 'imageDetails' --output json | jq 'length == 0' > /dev/null; then
        echo "No images found in ECR. Building and pushing..."
        # Build the Docker image
        echo Build started on `date`
        echo Building the Docker image...
        docker build -t $REPOSITORY_URI:latest .
        docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
        
        # Push the Docker image to Amazon ECR
        echo Build completed on `date`
        echo Pushing the Docker images...
        echo $REPOSITORY_URI
        docker push $REPOSITORY_URI:latest
        docker push $REPOSITORY_URI:$IMAGE_TAG
        else
        echo "Image already exists in ECR. Skipping build.";
        fi

  post_build:
    commands:
      - aws ecs update-service --cluster ECS-Cluster-FlaskApp --service ECS-Service --force-new-deployment

artifacts:
  files:
    - '**/*'
  discard-paths: yes
